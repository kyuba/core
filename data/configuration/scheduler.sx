;;
; vim:ft=lisp
;
; This file is used to configure kyuba's scheduler. The scheduler doesn't have
; very many options, and it probably won't be getting too many in the future
; either, but the options should nevertheless prove useful.
;
; There is one important option that you might want to modify yourself: module
; affinity. Basically, this parameter allows you to tell the scheduler whether
; you'd like it to prefer certain modules (daemons, init scripts, ...) over
; others when trying to resolve dependencies and for some dependencies there is
; more than one option.
;
; It works as follows: the module affinity is basically a list of atoms that
; describe modules or services, just like in modes.sx, followed by a numerical
; affinity for anything that matches that atom. To calculate the total affinity
; for each module, the list is traversed and each atom that matches up has the
; accompanying affinity added to its current affinity, starting at 0. Finally,
; for each service, the order in which modules are tried is determined by
; comparing the individual affinties and trying each module from highest to
; lowest affinity.
;
; Also potentially interesting: the implicit module affinity multipliers.
; Sounds tricky, but really it's easy: the scheduler will give certain automatic
; affinities to some modules, based on things such as the current mode, number
; of provided services, number of requirements, etc. The configurable part of
; this process is to give the scheduler a set of integers that serve as
; multipliers to the values the scheduler generates (and since 0 is also an
; integer, this allows for specific implicit affinities to be ignored).
;
; Currently, the implicit affinities are:
;   * specification in current mode data matches module (+1 or 0)
;   * number of provided services (+1 per service)
;   * number of requirements (-1 per requirement)
;   * "deprecated" flag (-1 or 0)
;   * "stable" flag (+1 or 0)
;   * "experimental" flag (+1 or 0)
;   * "problematic" flag (-1 or 0)
;
; Multipliers are specified for this in that same order. Omitted values are seen
; as zeroes. This allows for easy, deterministic extension of the feature in the
; future.
;
;;

(bind scheduler
  (affinity                     ; module affinities; see above for details
    (s-example . 5)             ; example affinity: s-example gets +5, unless
    ((core . s-example) . -10)) ; it's from the core namespace, then it gets -5

  (implicit-affinity-multipliers
    50 2 1 5 1 -1 2))           ; assume specific mentions are quite important,
                                ; otherwise kind of favour things that provide
                                ; much but use little
